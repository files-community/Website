@use "src/styles/mixins" as *;

:global {
	// Outer section
	#themes-section {
		border-radius: 0 0 var(--overlay-corner-radius) var(--overlay-corner-radius);
		background-color: var(--card-background-secondary);
		overflow: hidden;

		// Inner section
		.page-section-inner {
			@include flex($align: center);
			min-height: 600px; // I want to avoid cutting off the component showcase
		}

		// Fancy-pants dotted background
		// I want dynamic coloring so we'll have to mask it
		&::before {
			content: "";
			position: absolute;
			inset-block-start: -50%;
			inset-inline-start: -50%;
			width: 200vw;
			height: 200vw;
			background-image: linear-gradient(
				90deg,
				transparent 10%,
				var(--dots-color, var(--control-stroke-secondary)) 100%
			);
			transform: rotate(30deg);
			mask: url("data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' width='100' height='100'%3E%3Ccircle cx='50' cy='50' r='10' fill='%23000' /%3E%3C/svg%3E")
				center/18px;
		}

		// HACK: --background-base is a fairly generic variable that makes more sense to style on themes other than default.
		&:not(.theme-1) {
			background-color: var(--background-base);
			--dots-color: var(--subtle-color-tertiary);

			// Use default accent color instead of dark-1 (see reasoning below)
			::selection {
				background-color: var(--accent-color-default);
			}
		}

		// Themes
		// CSS variable voodoo ahead.
		//
		// CSS variables behave rather strange.
		// Setting a scoped variable that changes the value
		// in another parent variable's hsl(0, 0%, 0%() function
		// doesn't actually update the actual parent color.
		//
		// This means that we are basically forced to hardcode
		// hex colors for our accent color, since we use hsl
		// calcs. That really sucks. /rant
		&.theme- {
			&2 {
				--focus-stroke-outer: white;
				--accent-color-default: hsl(160, 58%, 52%);
				--accent-color-secondary: hsl(160, 47%, 62%);
				--accent-color-tertiary: hsl(160, 50%, 40%);
				--accent-text-default: var(--accent-color-default);
				--accent-text-tertiary: var(--accent-color-secondary);
				--text-color-primary: var(--accent-color-default);
				--text-color-tertiary: hsl(221, 16%, 70%);
				--text-color-secondary: hsl(221, 16%, 70%);
				--subtle-color-secondary: hsl(222, 16%, 25%);
				--subtle-color-tertiary: hsl(220, 16%, 22%);
				--background-base: hsl(220, 15%, 20%);
				--background-quarternary: var(--subtle-color-secondary);
				--dots-color: hsl(221, 16%, 30%);
			}

			&3 {
				--focus-stroke-outer: white;
				--accent-color-default: hsl(261, 43%, 45%);
				--accent-color-secondary: hsl(260, 44%, 55%);
				--accent-color-tertiary: var(--accent-color-secondary);
				--accent-text-default: var(--text-color-tertiary);
				--accent-text-tertiary: var(--accent-color-secondary);
				--accent-text-contrast-primary: white;
				--accent-text-contrast-secondary: hsl(white, 0.6);
				--text-color-primary: white;
				--text-color-secondary: hsl(260, 43%, 73%);
				--text-color-tertiary: var(--text-color-secondary);
				--subtle-color-secondary: hsl(253, 27%, 20%);
				--subtle-color-tertiary: hsl(253, 24%, 15%);
				--background-base: hsl(256, 22%, 10%);
				--background-quarternary: var(--subtle-color-tertiary);
				--dots-color: hsl(253, 27%, 20%);
			}

			&4 {
				--focus-stroke-outer: black;
				--accent-color-default: white;
				--accent-color-secondary: hsl(0, 0%, 100%, 0.8);
				--accent-color-tertiary: hsl(0, 0%, 100%, 0.6);
				--accent-text-default: var(--text-color-tertiary);
				--accent-text-tertiary: var(--accent-text-default);
				--accent-text-contrast-primary: black;
				--accent-text-contrast-secondary: var(--accent-text-contrast-primary);
				--text-color-primary: black;
				--text-color-tertiary: hsl(44, 100%, 10%);
				--text-color-secondary: var(--text-color-primary);
				--subtle-color-secondary: white;
				--subtle-color-tertiary: hsl(black, 0.1);
				--background-base: hsl(43, 100%, 50%);
				--background-quarternary: hsl(43, 100%, 75%);
				--dots-color: hsl(0, 0%, 0%, 0.2);

				.hyperlink-button {
					--subtle-color-secondary: hsl(0, 0%, 0%, 0.05);
				}
			}

			&5 {
				--focus-stroke-outer: white;
				--accent-color-default: hsl(46, 42%, 88%);
				--accent-color-secondary: hsl(44, 87%, 94%);
				--accent-color-tertiary: hsl(46, 40%, 85%);
				--accent-text-default: var(--text-color-tertiary);
				--accent-text-tertiary: var(--accent-color-secondary);
				--accent-text-contrast-primary: hsl(194, 14%, 40%);
				--accent-text-contrast-secondary: hsl(196, 13%, 45%);
				--text-color-primary: hsl(44, 87%, 94%);
				--text-color-tertiary: hsl(180, 7%, 60%);
				--text-color-secondary: hsl(186, 8%, 55%);
				--subtle-color-secondary: hsl(192, 81%, 14%);
				--subtle-color-tertiary: hsl(192, 79%, 15%);
				--background-base: hsl(192, 100%, 11%);
				--background-quarternary: var(--accent-color-secondary);
				--dots-color: var(--subtle-color-tertiary);
			}

			&6 {
				--focus-stroke-outer: black;
				--accent-color-default: hsl(193, 43%, 67%);
				--accent-color-secondary: hsl(193, 43%, 63%);
				--accent-color-tertiary: hsl(193, 43%, 59%);
				--accent-text-default: var(--text-color-tertiary);
				--accent-text-tertiary: var(--text-color-secondary);
				--accent-text-contrast-primary: var(--text-color-primary);
				--accent-text-contrast-secondary: var(--text-color-tertiary);
				--text-color-primary: hsl(220, 16%, 22%);
				--text-color-tertiary: hsl(220, 16%, 36%);
				--text-color-secondary: var(--text-color-primary);
				--subtle-color-secondary: var(--accent-color-default);
				--subtle-color-tertiary: hsl(219, 27%, 80%);
				--background-base: hsl(219, 28%, 88%);
				--background-quarternary: hsl(222, 16%, 28%);
				--dots-color: hsl(220, 16%, 65%);

				.hyperlink-button {
					--subtle-color-secondary: hsl(217, 27%, 85%);
				}
			}
		}
	}
}

.scroll-anchor {
	position: absolute;
	inset-block-start: 0;
	inset-inline-start: 0;
	visibility: hidden;
	width: 0;
	height: 100%;
	pointer-events: none;
}

// Component showcase
// Seen on the right side of the section
.component-showcase {
	@include flex($gap: 16px);
	position: absolute;
	inset-block-start: -100px;
	inset-inline-end: -100px;
	transform: rotate(30deg);
	@media only screen and (max-width: 1224px) {
		inset-block-start: -100px;
		inset-inline-end: -156px;
	}
	@media only screen and (max-width: 920px) {
		display: none;
	}

	// Main columns
	.column {
		@include flex($direction: column, $gap: 16px);

		// Inner row containers
		> div {
			@include flex($gap: 16px);
		}

		&.left {
			align-items: flex-end;
		}

		@media only screen and (max-width: 1224px) {
			.drive,
			.properties {
				display: none;
			}
			.card {
				order: -1;
			}
		}
	}

	// Items
	img,
	.card {
		border-radius: var(--overlay-corner-radius);
		box-shadow: var(--flyout-elevation);
		transform: scale(0.9);
		opacity: 0;
	}

	// Placeholder cards
	.card {
		width: 100%;
		background-color: var(--background-quarternary);
	}

	// Scale animations
	@keyframes showcase-item {
		0% {
			opacity: 0;
		}
		50% {
			opacity: 1;
		}
		100% {
			transform: scale(1);
			opacity: 1;
		}
	}

	// Visible state
	// For animating components on scroll
	&.visible {
		--initial-delay: 300ms;

		img,
		.card {
			animation: showcase-item 250ms cubic-bezier(0, 0, 0, 1) forwards
				var(--initial-delay);
		}

		.layout {
			animation-delay: calc(var(--initial-delay) + 200ms);
		}

		.card:last-child {
			animation-delay: calc(var(--initial-delay) + 275ms);
		}

		.card:first-child {
			animation-delay: calc(var(--initial-delay) + 350ms);
		}

		.properties {
			animation-delay: calc(var(--initial-delay) + 425ms);
		}

		.tabs {
			animation-delay: calc(var(--initial-delay) + 500ms);
		}

		.drive {
			animation-delay: calc(var(--initial-delay) + 575ms);
		}
	}

	// We don't want the 500ms delay we normally get when replaying them.
	// &.no-initial-delay {
	// 	--initial-delay: 0ms;
	// }
}

// Main themes section content
// Encompasses the left side of the section
.themes-section-content {
	width: 52%;
	min-width: 478px;

	// Small device support
	// Since our component showcase will be hidden at this size, fill 100% of the available width.
	@media only screen and (max-width: 832px) {
		width: 100%;
		min-width: unset;
	}
}

// Theme picker
// Container for <ColorSwatch /> components
.theme-chooser {
	display: grid;
	grid-template-columns: auto auto auto;
	gap: 12px;
	width: fit-content;
	margin-block-end: 24px;
}