# Coding Guidelines
  All code contributed to the repo must follow our [Model-view-viewModel](https://en.wikipedia.org/wiki/Model%E2%80%93view%E2%80%93viewmodel) design path.
  The code must be well-written and with clear purpose. In-code workarounds are not welcomed unless the scope of the PR touches external components
  (OS functions/api calls) that require unconventional practices of coding.
  Your code must be easily maintainable without requiring rewriting core parts, making sure no code is being duplicated, utilizing abstractions and inheritance
  is a great way to sustain high code metrics.
  Your code must also be tested for potential regressions and unwanted memory leaks.
  We also prioritize accessibility, to check whether your feature pull requests meets our standards, you're encouraged to use [Accessibility Insights for Windows](https://accessibilityinsights.io/docs/en/windows/overview/)
  this is to ensure anyone can take full advantage of Files.
  
# Code Style

1. **Use** `PascalCase`:

- class names
- method names
- const names

2. **Use** `camelCase`:

- method arguments
- local variables
- private fields

3. **Don't use** Hungarian Notation.

4. **Don't use** underscores (`_`), hyphens (`-`), or any other non-alphanumeric characters.

5. **Don't use** CAPITAL LETTERS in any names.

6. **Use** predefined type names like `int`, `string`, etc. instead of `Int32`, `String`.

7. **Do** prefix the names of interfaces with `I`.

8. **Do** align curly brackets vertically.

9. **Don't use** `Enum` or `Flag(s)` suffixes for Enum names.

10. **Use** the prefixes `Is`, `Has`, `Have`, `Any`, `Can` or similar keywords for boolean names.

11. **Use** curly brackets for single line `if`, `for` and `foreach` statements.
